#!/usr/bin/env ruby

# EZLogs Rails Application - Task Termination Script
# This script marks a task as complete by moving it from active to done

require 'fileutils'
require 'optparse'

class TaskTerminator
  def initialize
    @options = {}
    @parser = OptionParser.new do |opts|
      opts.banner = "Usage: terminate_task [options] TASK_NUMBER"
      
      opts.on("-t", "--task TASK", "Task number to terminate (e.g., 01, 02)") do |task|
        @options[:task] = task
      end
      
      opts.on("-m", "--message MESSAGE", "Completion message") do |message|
        @options[:message] = message
      end
      
      opts.on("-h", "--help", "Show this help message") do
        puts opts
        exit
      end
    end
  end

  def run
    @parser.parse!
    
    task_number = @options[:task] || ARGV.first
    
    if task_number.nil?
      puts "Error: Task number is required"
      puts @parser
      exit 1
    end
    
    terminate_task(task_number, @options[:message])
  end

  private

  def terminate_task(task_number, message = nil)
    # Ensure task number is properly formatted
    task_number = task_number.to_s.rjust(2, '0')
    
    active_dir = File.join(__dir__, '..', 'ai_tasks', 'active')
    done_dir = File.join(__dir__, '..', 'ai_tasks', 'done')
    
    # Find the task directory
    task_pattern = "#{task_number}-*"
    task_dirs = Dir.glob(File.join(active_dir, task_pattern))
    
    if task_dirs.empty?
      puts "Error: No task found matching pattern #{task_pattern}"
      exit 1
    end
    
    if task_dirs.length > 1
      puts "Error: Multiple tasks found matching pattern #{task_pattern}:"
      task_dirs.each { |dir| puts "  #{File.basename(dir)}" }
      exit 1
    end
    
    task_dir = task_dirs.first
    task_name = File.basename(task_dir)
    
    # Create done directory if it doesn't exist
    FileUtils.mkdir_p(done_dir)
    
    # Move task to done directory
    done_task_dir = File.join(done_dir, task_name)
    
    if Dir.exist?(done_task_dir)
      puts "Warning: Task already exists in done directory. Overwriting..."
      FileUtils.rm_rf(done_task_dir)
    end
    
    FileUtils.mv(task_dir, done_task_dir)
    
    # Add completion timestamp and message
    completion_file = File.join(done_task_dir, 'completion.md')
    timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")
    
    completion_content = <<~COMPLETION
      # Task Completion
      
      **Task**: #{task_name}
      **Completed**: #{timestamp}
      **Completed By**: #{ENV['USER'] || 'Unknown'}
      
      #{message ? "**Message**: #{message}" : ''}
      
      ## Summary
      
      This task has been completed successfully. All deliverables have been implemented and tested.
      
      ## Next Steps
      
      The next task in the sequence should be started to continue development.
      
      ---
      *This file was automatically generated by the terminate_task script.*
    COMPLETION
    
    File.write(completion_file, completion_content)
    
    puts "✅ Task #{task_name} has been terminated and moved to done directory"
    puts "📝 Completion details saved to #{completion_file}"
    puts ""
    puts "🎉 Great job! The task is now complete."
    puts ""
    puts "📋 Next steps:"
    puts "   1. Review the completed task"
    puts "   2. Start the next task in the sequence"
    puts "   3. Update project documentation if needed"
  end
end

if __FILE__ == $0
  TaskTerminator.new.run
end 